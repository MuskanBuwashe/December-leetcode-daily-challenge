/*You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
Example 2:

Input: nums = [1], target = 1
Output: 1
 

Constraints:

1 <= nums.length <= 20
0 <= nums[i] <= 1000
0 <= sum(nums[i]) <= 1000
-1000 <= target <= 1000*/
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        // p
        //(s-p) -- sum of nums to be neg
        // t = p - (s-p)
        // 2p-s = t
        // p = (s+t)/2 -- how many p to be selected
        int s = 0;
        int n = nums.length;
        for(int num : nums) s += num;
        target += s;
        if(target < 0 || target % 2 != 0) return 0; // s+t must be non neg, or cannot reach target
        target /= 2;

        int[] dp = new int[target+1]; // flatten to one dimension
        dp[0] = 1;
        for(int i = 0; i < n; ++i){
            for(int c = target; c >= 0; --c){
                // if(c < nums[i]){ don't need this part '
                    // dp[c] = dp[c];
                if(c >= nums[i]){
                    dp[c] = dp[c] + dp[c-nums[i]];
                }
            }
        }
        return dp[target];
    }

}
